// <auto-generated />
using System;
using FSM.Calendar.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FSM.Calendar.Persistance.Migrations
{
    [DbContext(typeof(CalendarDbContext))]
    [Migration("20220729112519_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ExternalId")
                        .IsUnicode(true)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProcessAliasId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcessAliasId");

                    b.ToTable("Processes", (string)null);
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.ProcessAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProcessAliases", (string)null);
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time(7)");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time(7)");

                    b.HasKey("Id");

                    b.ToTable("Slots", (string)null);
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.SlotAssignment", b =>
                {
                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("TerritoryAliasId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessAliasId")
                        .HasColumnType("int");

                    b.Property<int>("TotalCases")
                        .HasColumnType("int");

                    b.HasKey("SlotId", "TerritoryAliasId", "ProcessAliasId");

                    b.HasIndex("ProcessAliasId");

                    b.HasIndex("TerritoryAliasId");

                    b.ToTable("SlotAssignments", (string)null);
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.TeamAssignment", b =>
                {
                    b.Property<int>("SlotId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<int>("TerritoryId")
                        .HasColumnType("int");

                    b.HasKey("SlotId", "TeamId", "ProcessId", "TerritoryId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("TeamAssignments", (string)null);
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.Territory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Territories", (string)null);
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.TerritoryAlias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("TerritoryAliases", (string)null);
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.Process", b =>
                {
                    b.HasOne("FSM.Calendar.Domain.Entities.ProcessAlias", "ProcessAlias")
                        .WithMany("Processes")
                        .HasForeignKey("ProcessAliasId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProcessAlias");
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.SlotAssignment", b =>
                {
                    b.HasOne("FSM.Calendar.Domain.Entities.ProcessAlias", "ProcessAlias")
                        .WithMany("SlotAssignments")
                        .HasForeignKey("ProcessAliasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSM.Calendar.Domain.Entities.Slot", "Slot")
                        .WithMany("SlotAssignments")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSM.Calendar.Domain.Entities.TerritoryAlias", "TerritoryAlias")
                        .WithMany("SlotAssignments")
                        .HasForeignKey("TerritoryAliasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessAlias");

                    b.Navigation("Slot");

                    b.Navigation("TerritoryAlias");
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.TeamAssignment", b =>
                {
                    b.HasOne("FSM.Calendar.Domain.Entities.Process", "Process")
                        .WithMany("TeamAssignments")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSM.Calendar.Domain.Entities.Slot", "Slot")
                        .WithMany("TeamAssignments")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSM.Calendar.Domain.Entities.Team", "Team")
                        .WithMany("TeamAssignments")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSM.Calendar.Domain.Entities.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("Slot");

                    b.Navigation("Team");

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.Territory", b =>
                {
                    b.HasOne("FSM.Calendar.Domain.Entities.TerritoryAlias", "TerritoryAlias")
                        .WithMany("Territories")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TerritoryAlias");
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.Process", b =>
                {
                    b.Navigation("TeamAssignments");
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.ProcessAlias", b =>
                {
                    b.Navigation("Processes");

                    b.Navigation("SlotAssignments");
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.Slot", b =>
                {
                    b.Navigation("SlotAssignments");

                    b.Navigation("TeamAssignments");
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.Team", b =>
                {
                    b.Navigation("TeamAssignments");
                });

            modelBuilder.Entity("FSM.Calendar.Domain.Entities.TerritoryAlias", b =>
                {
                    b.Navigation("SlotAssignments");

                    b.Navigation("Territories");
                });
#pragma warning restore 612, 618
        }
    }
}
